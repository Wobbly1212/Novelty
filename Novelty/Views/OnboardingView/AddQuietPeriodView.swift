//
//  AddQuietPeriodView.swift
//  Novelty
//
//  Created by YourTeam on May 23, 2025.
//

import SwiftUI

struct AddQuietPeriodView: View {
    @Environment(\.dismiss) var dismiss // To close the sheet
    var onSave: (QuietPeriod) -> Void    // Closure to pass the new period back

    // State for the inputs
    @State private var name: String = ""
    @State private var startTime: Date = defaultStartTime()
    @State private var endTime: Date = defaultEndTime()
    @State private var selectedDays: Set<Int> = [] // 1=Sun, 2=Mon, ..., 7=Sat
    @State private var isEnabled: Bool = true     // New periods are enabled by default

    // For the day selector UI
    let daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]

    // Default times (e.g., 10 PM for start, 7 AM for end)
    static func defaultStartTime() -> Date {
        return Calendar.current.date(bySettingHour: 22, minute: 0, second: 0, of: Date()) ?? Date()
    }
    static func defaultEndTime() -> Date {
        return Calendar.current.date(bySettingHour: 7, minute: 0, second: 0, of: Date()) ?? Date()
    }

    var body: some View {
        NavigationView { // Provides a title bar and Save/Cancel buttons for the sheet
            Form {
                Section(header: Text("Name (Optional)")) {
                    TextField("e.g., Sleep, Work Focus", text: $name)
                }

                Section(header: Text("Time Range")) {
                    DatePicker("Start Time", selection: $startTime, displayedComponents: .hourAndMinute)
                    DatePicker("End Time", selection: $endTime, displayedComponents: .hourAndMinute)
                }

                Section(header: Text("Repeat on Days")) {
                    // A more compact and tappable day selector
                    HStack(spacing: 8) { // Adjust spacing as needed
                        ForEach(0..<daysOfWeek.count, id: \.self) { index in
                            let dayIndex = index + 1 // Calendar weekday index (1 for Sun, etc.)
                            Text(daysOfWeek[index].prefix(3)) // Show "Sun", "Mon", etc.
                                .font(.system(size: 12, weight: .medium))
                                .padding(8)
                                .frame(minWidth: 40, idealHeight: 30) // Ensure decent tap area
                                .background(selectedDays.contains(dayIndex) ? Color.accentColor : Color(UIColor.systemGray5))
                                .foregroundColor(selectedDays.contains(dayIndex) ? .white : .primary)
                                .cornerRadius(8)
                                .onTapGesture {
                                    if selectedDays.contains(dayIndex) {
                                        selectedDays.remove(dayIndex)
                                    } else {
                                        selectedDays.insert(dayIndex)
                                    }
                                }
                        }
                    }
                    .padding(.vertical, 5) // Padding around the HStack of days
                    if selectedDays.isEmpty {
                        Text("No days selected. This period will not repeat automatically.")
                            .font(.caption)
                            .foregroundColor(.gray)
                    }
                }
                
                Section {
                    Toggle("Enable this Quiet Period", isOn: $isEnabled)
                }

            }
            .navigationTitle("Add Quiet Period")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        // Basic validation:
                        if selectedDays.isEmpty {
                            // Optionally alert the user or handle as a one-time non-repeating period
                            // For now, we allow it, it just won't match any day for repetition.
                        }
                        
                        let newPeriod = QuietPeriod(
                            // id will be generated by QuietPeriod's default initializer
                            startTime: startTime,
                            endTime: endTime,
                            daysOfWeek: selectedDays,
                            name: name.isEmpty ? nil : name, // Use nil if name is empty
                            isEnabled: isEnabled
                        )
                        onSave(newPeriod) // Pass the new period back
                        dismiss()         // Close the sheet
                    }
                    .disabled(selectedDays.isEmpty && name.isEmpty) // Example: disable save if no days and no name
                }
            }
        }
    }
}

// MARK: - Preview for AddQuietPeriodView
struct AddQuietPeriodView_Previews: PreviewProvider {
    static var previews: some View {
        AddQuietPeriodView { period in
            print("Saved period: \(period.name ?? "Unnamed") starting at \(period.startTime)")
        }
    }
}
